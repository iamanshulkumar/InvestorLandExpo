pluginManagement {
  def reactNativeGradlePlugin = new File(
          ["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"]
                  .execute(null, rootDir).text.trim()
  ).getParentFile().toString()

  includeBuild(reactNativeGradlePlugin)
}

plugins {
  id("com.facebook.react.settings")
}

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    def command = [
            'node',
            '--no-warnings',
            '--eval',
            'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
            'react-native-config',
            '--json',
            '--platform',
            'android'
    ]
    ex.autolinkLibrariesFromCommand(command)
  }
}

rootProject.name = 'InvestorLands'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(
              ["node", "--print", "require.resolve('react-native/package.json')"]
                      .execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml"
      )))
    }
  }
}

def expoPackageJsonPath = new File(
        ["node", "--print", "require.resolve('expo/package.json')"]
                .execute(null, rootDir).text.trim()
)
apply from: new File(expoPackageJsonPath, "../scripts/autolinking.gradle")

useExpoModules()

include ':app'

def reactNativeGradlePluginPath = new File(
        ["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"]
                .execute(null, rootDir).text.trim()
).getParentFile()

includeBuild(reactNativeGradlePluginPath)
